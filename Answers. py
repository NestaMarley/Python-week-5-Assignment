class Superhero:
    def __init__(self, name, power, city):
        self.name = name
        self.power = power
        self.city = city

    def use_power(self):
        return f"{self.name} uses {self.power} to save the day!"

    def __str__(self):
        return f"{self.name}, the superhero of {self.city}, has the power of {self.power}."


class FlyingSuperhero(Superhero):
    def __init__(self, name, power, city, flight_speed):
        super().__init__(name, power, city)
        self.flight_speed = flight_speed

    def use_power(self):
        return f"{self.name} takes off at {self.flight_speed} mph, using {self.power} to combat evil!"

    def __str__(self):
        return (f"{self.name}, the flying superhero of {self.city}, has the power of {self.power} "
                f"and can fly at {self.flight_speed} mph.")


class StrengthSuperhero(Superhero):
    def __init__(self, name, power, city, strength_level):
        super().__init__(name, power, city)
        self.strength_level = strength_level

    def use_power(self):
        return f"{self.name} lifts a car with a strength level of {self.strength_level}!"

    def __str__(self):
        return (f"{self.name}, the strength superhero of {self.city}, has the power of {self.power} "
                f"with a strength level of {self.strength_level}.")


# Example usage:
hero1 = FlyingSuperhero("Skyhawk", "Aerokinesis", "Metropolis", 300)
hero2 = StrengthSuperhero("Titan", "Super Strength", "Gotham", 10)

print(hero1)  # Output: Skyhawk, the flying superhero of Metropolis, has the power of Aerokinesis and can fly at 300 mph.
print(hero1.use_power())  # Output: Skyhawk takes off at 300 mph, using Aerokinesis to combat evil!

print(hero2)  # Output: Titan, the strength superhero of Gotham, has the power of Super Strength with a strength level of 10.
print(hero2.use_power())  # Output: Titan lifts a car with a strength level of 10!

2.)class Vehicle:
    def move(self):
        raise NotImplementedError("Subclasses must implement this method")


class Car(Vehicle):
    def move(self):
        return "Driving 🚗"


class Bicycle(Vehicle):
    def move(self):
        return "Pedaling 🚲"


class Plane(Vehicle):
    def move(self):
        return "Flying ✈️"


class Animal:
    def move(self):
        raise NotImplementedError("Subclasses must implement this method")


class Dog(Animal):
    def move(self):
        return "Running 🐕"


class Fish(Animal):
    def move(self):
        return "Swimming 🐟"


class Bird(Animal):
    def move(self):
        return "Flapping wings 🐦"


# Example usage
def demonstrate_movement(entities):
    for entity in entities:
        print(entity.move())


# Creating instances of each class
car = Car()
bicycle = Bicycle()
plane = Plane()
dog = Dog()
fish = Fish()
bird = Bird()

# List of all entities
entities = [car, bicycle, plane, dog, fish, bird]

# Demonstrating movement
demonstrate_movement(entities)

